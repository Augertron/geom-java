/* File GlideReflection2D.java 
 *
 * Project : geometry
 *
 * ===========================================
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library. if not, write to :
 * The Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * Created 16 déc. 07
 */

package math.geom2d.transform;


import math.geom2d.Shape2D;
import math.geom2d.Vector2D;
import math.geom2d.line.*;

/**
 * A glide reflection is generated by applying first a reflection along a
 * line, then a translation in the direction given by the line. 
 * The composition of 2 glide reflections is equivalent to a translation.
 * @author dlegland
 *
 */
public class GlideReflection2D extends AbstractAffineTransform2D implements
		Isometry2D {
	
	StraightLine2D line;
	double distance;
	
	public GlideReflection2D(StraightObject2D line, double distance){
		this.line = new StraightLine2D(line);
		this.distance = distance;
	}

	/**
	 * Returns true by definition of glide reflection.
	 */
	public boolean isSimilarity(){
		return true;
	}
	
	/**
	 * Returns true if translation part is equivalent to identity.
	 */
	public boolean isMotion(){
		return Math.abs(distance)<Shape2D.ACCURACY;
	}
	
	/**
	 * Returns true by definition of glide reflection.
	 */
	public boolean isIsometry(){
		return true;
	}
	
	/**
	 * Returns false by definition of glide reflection.
	 */
	public boolean isDirect(){
		return false;
	}
	
	/**
	 * Returns false by definition.
	 */
	public boolean isIdentity(){
		return false;
	}

	
	/* (non-Javadoc)
	 * @see math.geom2d.Similarity2D#getLinearPart()
	 */
	public LinearTransform2D getLinearPart() {
		return new LinearLineReflection2D(line.getVector());
	}

	/**
	 * The scaling factor is 1 by definition.
	 */
	public double getScalingFactor() {
		return 1;
	}

	/* (non-Javadoc)
	 * @see math.geom2d.Similarity2D#getTranslationPart()
	 */
	public Translation2D getTranslationPart() {
		Vector2D vect = line.getVector().getNormalizedVector();
		return new Translation2D(vect.getDx()*distance, vect.getDy()*distance);
	}

	/* (non-Javadoc)
	 * @see math.geom2d.AffineTransform2D#getAffineMatrix()
	 */
	public double[][] getAffineMatrix() {
		return this.getTranslationPart().compose(
				this.getLinearPart()).getAffineMatrix();
	}

	/* (non-Javadoc)
	 * @see math.geom2d.AffineTransform2D#getCoefficients()
	 */
	public double[] getCoefficients() {
		return this.getTranslationPart().compose(
				this.getLinearPart()).getCoefficients();
	}

	/* (non-Javadoc)
	 * @see math.geom2d.Bijection2D#getInverseTransform()
	 */
	public GlideReflection2D getInverseTransform() {
		return new GlideReflection2D(line, -distance);
	}

}
